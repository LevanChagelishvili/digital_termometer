
termometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000380  00000414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000380  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080010a  0080010a  0000041e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000084b  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000701  00000000  00000000  00000d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000389  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  000017a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043a  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000191  00000000  00000000  00001cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001e47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 29 01 	jmp	0x252	; 0x252 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e8       	ldi	r30, 0x80	; 128
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <main>
  9e:	0c 94 be 01 	jmp	0x37c	; 0x37c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <timer0_init>:

// Timer0 initialization function
void timer0_init(void) 
{
	// Timer/Counter Control Register B, 
	TCCR0B &= ~(1 << CS02); 
  a6:	85 b5       	in	r24, 0x25	; 37
  a8:	8b 7f       	andi	r24, 0xFB	; 251
  aa:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1 << CS00); 
  ac:	85 b5       	in	r24, 0x25	; 37
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	85 bd       	out	0x25, r24	; 37
	// Clock Select CS02 = 0, CS01 = 1 CS00 = 0 - 1/8 prescaler
	TCCR0B |= (1 << CS01);
  b2:	85 b5       	in	r24, 0x25	; 37
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	85 bd       	out	0x25, r24	; 37
	// Timer/Counter Interrupt Mask Register, TOIE0: Timer/Counter0 Overflow Interrupt Enable
	TIMSK0 |= (1 << TOIE0);
  b8:	ee e6       	ldi	r30, 0x6E	; 110
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	80 83       	st	Z, r24
	// Timer/Counter Register 
	TCNT0 = 0x00;
  c2:	16 bc       	out	0x26, r1	; 38
	// Global interrupt enable
	sei ();
  c4:	78 94       	sei
  c6:	08 95       	ret

000000c8 <divide_number>:
}


void divide_number(uint16_t number)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ac 01       	movw	r20, r24
	temp1 = number/1000;
  ce:	ec 01       	movw	r28, r24
  d0:	d6 95       	lsr	r29
  d2:	c7 95       	ror	r28
  d4:	d6 95       	lsr	r29
  d6:	c7 95       	ror	r28
  d8:	d6 95       	lsr	r29
  da:	c7 95       	ror	r28
  dc:	9e 01       	movw	r18, r28
  de:	a5 ec       	ldi	r26, 0xC5	; 197
  e0:	b0 e2       	ldi	r27, 0x20	; 32
  e2:	0e 94 af 01 	call	0x35e	; 0x35e <__umulhisi3>
  e6:	fc 01       	movw	r30, r24
  e8:	f2 95       	swap	r31
  ea:	e2 95       	swap	r30
  ec:	ef 70       	andi	r30, 0x0F	; 15
  ee:	ef 27       	eor	r30, r31
  f0:	ff 70       	andi	r31, 0x0F	; 15
  f2:	ef 27       	eor	r30, r31
  f4:	f0 93 12 01 	sts	0x0112, r31	; 0x800112 <temp1+0x1>
  f8:	e0 93 11 01 	sts	0x0111, r30	; 0x800111 <temp1>
	temp2 = number%1000/100;
  fc:	28 ee       	ldi	r18, 0xE8	; 232
  fe:	33 e0       	ldi	r19, 0x03	; 3
 100:	e2 9f       	mul	r30, r18
 102:	c0 01       	movw	r24, r0
 104:	e3 9f       	mul	r30, r19
 106:	90 0d       	add	r25, r0
 108:	f2 9f       	mul	r31, r18
 10a:	90 0d       	add	r25, r0
 10c:	11 24       	eor	r1, r1
 10e:	9a 01       	movw	r18, r20
 110:	28 1b       	sub	r18, r24
 112:	39 0b       	sbc	r19, r25
 114:	36 95       	lsr	r19
 116:	27 95       	ror	r18
 118:	36 95       	lsr	r19
 11a:	27 95       	ror	r18
 11c:	ab e7       	ldi	r26, 0x7B	; 123
 11e:	b4 e1       	ldi	r27, 0x14	; 20
 120:	0e 94 af 01 	call	0x35e	; 0x35e <__umulhisi3>
 124:	96 95       	lsr	r25
 126:	87 95       	ror	r24
 128:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <temp2+0x1>
 12c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <temp2>
	temp3 = number%100/10;
 130:	9a 01       	movw	r18, r20
 132:	36 95       	lsr	r19
 134:	27 95       	ror	r18
 136:	36 95       	lsr	r19
 138:	27 95       	ror	r18
 13a:	0e 94 af 01 	call	0x35e	; 0x35e <__umulhisi3>
 13e:	9c 01       	movw	r18, r24
 140:	36 95       	lsr	r19
 142:	27 95       	ror	r18
 144:	64 e6       	ldi	r22, 0x64	; 100
 146:	62 9f       	mul	r22, r18
 148:	c0 01       	movw	r24, r0
 14a:	63 9f       	mul	r22, r19
 14c:	90 0d       	add	r25, r0
 14e:	11 24       	eor	r1, r1
 150:	9a 01       	movw	r18, r20
 152:	28 1b       	sub	r18, r24
 154:	39 0b       	sbc	r19, r25
 156:	ad ec       	ldi	r26, 0xCD	; 205
 158:	bc ec       	ldi	r27, 0xCC	; 204
 15a:	0e 94 af 01 	call	0x35e	; 0x35e <__umulhisi3>
 15e:	96 95       	lsr	r25
 160:	87 95       	ror	r24
 162:	96 95       	lsr	r25
 164:	87 95       	ror	r24
 166:	96 95       	lsr	r25
 168:	87 95       	ror	r24
 16a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <temp3+0x1>
 16e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <temp3>
	temp4 = number%10;
 172:	9a 01       	movw	r18, r20
 174:	0e 94 af 01 	call	0x35e	; 0x35e <__umulhisi3>
 178:	96 95       	lsr	r25
 17a:	87 95       	ror	r24
 17c:	96 95       	lsr	r25
 17e:	87 95       	ror	r24
 180:	96 95       	lsr	r25
 182:	87 95       	ror	r24
 184:	9c 01       	movw	r18, r24
 186:	22 0f       	add	r18, r18
 188:	33 1f       	adc	r19, r19
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	82 0f       	add	r24, r18
 198:	93 1f       	adc	r25, r19
 19a:	9a 01       	movw	r18, r20
 19c:	28 1b       	sub	r18, r24
 19e:	39 0b       	sbc	r19, r25
 1a0:	30 93 0c 01 	sts	0x010C, r19	; 0x80010c <temp4+0x1>
 1a4:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <temp4>
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <__vector_16>:

// Interrupt function for timer0
ISR (TIMER0_OVF_vect)
{
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	8f 93       	push	r24
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
	if(transistor_out == 1){TRANSISTOR_CONTROL = 0x10; SEVEN_SEGMENT_CONTROL = seven_segment_buffer[temp1];}
 1be:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	51 f4       	brne	.+20     	; 0x1da <__vector_16+0x2c>
 1c6:	80 e1       	ldi	r24, 0x10	; 16
 1c8:	85 b9       	out	0x05, r24	; 5
 1ca:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <temp1>
 1ce:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <temp1+0x1>
 1d2:	e0 50       	subi	r30, 0x00	; 0
 1d4:	ff 4f       	sbci	r31, 0xFF	; 255
 1d6:	80 81       	ld	r24, Z
 1d8:	8b b9       	out	0x0b, r24	; 11
	if(transistor_out == 2){TRANSISTOR_CONTROL = 0x08; SEVEN_SEGMENT_CONTROL = seven_segment_buffer[temp2];}
 1da:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	51 f4       	brne	.+20     	; 0x1f6 <__vector_16+0x48>
 1e2:	88 e0       	ldi	r24, 0x08	; 8
 1e4:	85 b9       	out	0x05, r24	; 5
 1e6:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <temp2>
 1ea:	f0 91 10 01 	lds	r31, 0x0110	; 0x800110 <temp2+0x1>
 1ee:	e0 50       	subi	r30, 0x00	; 0
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	80 81       	ld	r24, Z
 1f4:	8b b9       	out	0x0b, r24	; 11
	if(transistor_out == 3){TRANSISTOR_CONTROL = 0x04; SEVEN_SEGMENT_CONTROL = seven_segment_buffer[temp3];}
 1f6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1fa:	83 30       	cpi	r24, 0x03	; 3
 1fc:	51 f4       	brne	.+20     	; 0x212 <__vector_16+0x64>
 1fe:	84 e0       	ldi	r24, 0x04	; 4
 200:	85 b9       	out	0x05, r24	; 5
 202:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <temp3>
 206:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <temp3+0x1>
 20a:	e0 50       	subi	r30, 0x00	; 0
 20c:	ff 4f       	sbci	r31, 0xFF	; 255
 20e:	80 81       	ld	r24, Z
 210:	8b b9       	out	0x0b, r24	; 11
	if(transistor_out == 4){TRANSISTOR_CONTROL = 0x02; SEVEN_SEGMENT_CONTROL = seven_segment_buffer[temp4];}
 212:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 216:	84 30       	cpi	r24, 0x04	; 4
 218:	51 f4       	brne	.+20     	; 0x22e <__vector_16+0x80>
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	85 b9       	out	0x05, r24	; 5
 21e:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <temp4>
 222:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <temp4+0x1>
 226:	e0 50       	subi	r30, 0x00	; 0
 228:	ff 4f       	sbci	r31, 0xFF	; 255
 22a:	80 81       	ld	r24, Z
 22c:	8b b9       	out	0x0b, r24	; 11
	transistor_out++;
 22e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 232:	8f 5f       	subi	r24, 0xFF	; 255
 234:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	if(transistor_out > 4) transistor_out = 1;
 238:	85 30       	cpi	r24, 0x05	; 5
 23a:	18 f0       	brcs	.+6      	; 0x242 <__vector_16+0x94>
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
 242:	ff 91       	pop	r31
 244:	ef 91       	pop	r30
 246:	8f 91       	pop	r24
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <__vector_21>:


ISR(ADC_vect)
{
 252:	1f 92       	push	r1
 254:	0f 92       	push	r0
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	0f 92       	push	r0
 25a:	11 24       	eor	r1, r1
 25c:	2f 93       	push	r18
 25e:	3f 93       	push	r19
 260:	4f 93       	push	r20
 262:	5f 93       	push	r21
 264:	6f 93       	push	r22
 266:	7f 93       	push	r23
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
 26c:	af 93       	push	r26
 26e:	bf 93       	push	r27
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31
	// Read ADC value
	uint32_t adcValue = ADC;
 274:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 278:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
	// Scale ADC value to desired range (0 - 255)
	currentTemp = adcValue * 500 / 1023;
 27c:	a4 ef       	ldi	r26, 0xF4	; 244
 27e:	b1 e0       	ldi	r27, 0x01	; 1
 280:	0e 94 af 01 	call	0x35e	; 0x35e <__umulhisi3>
 284:	2f ef       	ldi	r18, 0xFF	; 255
 286:	33 e0       	ldi	r19, 0x03	; 3
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	0e 94 8d 01 	call	0x31a	; 0x31a <__udivmodsi4>
 290:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <currentTemp+0x1>
 294:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <currentTemp>
	
	// Start the next ADC conversion
	ADCSRA |= (1 << ADSC);
 298:	ea e7       	ldi	r30, 0x7A	; 122
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	80 64       	ori	r24, 0x40	; 64
 2a0:	80 83       	st	Z, r24
}
 2a2:	ff 91       	pop	r31
 2a4:	ef 91       	pop	r30
 2a6:	bf 91       	pop	r27
 2a8:	af 91       	pop	r26
 2aa:	9f 91       	pop	r25
 2ac:	8f 91       	pop	r24
 2ae:	7f 91       	pop	r23
 2b0:	6f 91       	pop	r22
 2b2:	5f 91       	pop	r21
 2b4:	4f 91       	pop	r20
 2b6:	3f 91       	pop	r19
 2b8:	2f 91       	pop	r18
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <main>:

int main(void)
{
	DDRB = 0x1F;
 2c4:	8f e1       	ldi	r24, 0x1F	; 31
 2c6:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	8a b9       	out	0x0a, r24	; 10
	TRANSISTOR_CONTROL |= (1 << 1) | (1 << 2) | (1 << 3) | (1 << 4);
 2cc:	85 b1       	in	r24, 0x05	; 5
 2ce:	8e 61       	ori	r24, 0x1E	; 30
 2d0:	85 b9       	out	0x05, r24	; 5
	DDRC = 0x00;
 2d2:	17 b8       	out	0x07, r1	; 7
	
	timer0_init();
 2d4:	0e 94 53 00 	call	0xa6	; 0xa6 <timer0_init>
	
	// Enable ADC and set ADC prescaler to 128
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 2d8:	ea e7       	ldi	r30, 0x7A	; 122
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	87 68       	ori	r24, 0x87	; 135
 2e0:	80 83       	st	Z, r24
	
	// Set ADC reference voltage to AVCC
	ADMUX |= (1 << REFS0);
 2e2:	ac e7       	ldi	r26, 0x7C	; 124
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	8c 91       	ld	r24, X
 2e8:	80 64       	ori	r24, 0x40	; 64
 2ea:	8c 93       	st	X, r24
	
	// Enable ADC interrupt
	ADCSRA |= (1 << ADIE);
 2ec:	80 81       	ld	r24, Z
 2ee:	88 60       	ori	r24, 0x08	; 8
 2f0:	80 83       	st	Z, r24
	
	// Start the first ADC conversion
	ADCSRA |= (1 << ADSC);
 2f2:	80 81       	ld	r24, Z
 2f4:	80 64       	ori	r24, 0x40	; 64
 2f6:	80 83       	st	Z, r24
	
	sei ();
 2f8:	78 94       	sei
	
	

	while (1)
	{
		divide_number(currentTemp);
 2fa:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <currentTemp>
 2fe:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <currentTemp+0x1>
 302:	0e 94 64 00 	call	0xc8	; 0xc8 <divide_number>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 306:	2f e7       	ldi	r18, 0x7F	; 127
 308:	88 e3       	ldi	r24, 0x38	; 56
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	21 50       	subi	r18, 0x01	; 1
 30e:	80 40       	sbci	r24, 0x00	; 0
 310:	90 40       	sbci	r25, 0x00	; 0
 312:	e1 f7       	brne	.-8      	; 0x30c <main+0x48>
 314:	00 c0       	rjmp	.+0      	; 0x316 <main+0x52>
 316:	00 00       	nop
 318:	f0 cf       	rjmp	.-32     	; 0x2fa <main+0x36>

0000031a <__udivmodsi4>:
 31a:	a1 e2       	ldi	r26, 0x21	; 33
 31c:	1a 2e       	mov	r1, r26
 31e:	aa 1b       	sub	r26, r26
 320:	bb 1b       	sub	r27, r27
 322:	fd 01       	movw	r30, r26
 324:	0d c0       	rjmp	.+26     	; 0x340 <__udivmodsi4_ep>

00000326 <__udivmodsi4_loop>:
 326:	aa 1f       	adc	r26, r26
 328:	bb 1f       	adc	r27, r27
 32a:	ee 1f       	adc	r30, r30
 32c:	ff 1f       	adc	r31, r31
 32e:	a2 17       	cp	r26, r18
 330:	b3 07       	cpc	r27, r19
 332:	e4 07       	cpc	r30, r20
 334:	f5 07       	cpc	r31, r21
 336:	20 f0       	brcs	.+8      	; 0x340 <__udivmodsi4_ep>
 338:	a2 1b       	sub	r26, r18
 33a:	b3 0b       	sbc	r27, r19
 33c:	e4 0b       	sbc	r30, r20
 33e:	f5 0b       	sbc	r31, r21

00000340 <__udivmodsi4_ep>:
 340:	66 1f       	adc	r22, r22
 342:	77 1f       	adc	r23, r23
 344:	88 1f       	adc	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	1a 94       	dec	r1
 34a:	69 f7       	brne	.-38     	; 0x326 <__udivmodsi4_loop>
 34c:	60 95       	com	r22
 34e:	70 95       	com	r23
 350:	80 95       	com	r24
 352:	90 95       	com	r25
 354:	9b 01       	movw	r18, r22
 356:	ac 01       	movw	r20, r24
 358:	bd 01       	movw	r22, r26
 35a:	cf 01       	movw	r24, r30
 35c:	08 95       	ret

0000035e <__umulhisi3>:
 35e:	a2 9f       	mul	r26, r18
 360:	b0 01       	movw	r22, r0
 362:	b3 9f       	mul	r27, r19
 364:	c0 01       	movw	r24, r0
 366:	a3 9f       	mul	r26, r19
 368:	70 0d       	add	r23, r0
 36a:	81 1d       	adc	r24, r1
 36c:	11 24       	eor	r1, r1
 36e:	91 1d       	adc	r25, r1
 370:	b2 9f       	mul	r27, r18
 372:	70 0d       	add	r23, r0
 374:	81 1d       	adc	r24, r1
 376:	11 24       	eor	r1, r1
 378:	91 1d       	adc	r25, r1
 37a:	08 95       	ret

0000037c <_exit>:
 37c:	f8 94       	cli

0000037e <__stop_program>:
 37e:	ff cf       	rjmp	.-2      	; 0x37e <__stop_program>

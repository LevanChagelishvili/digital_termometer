
clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000037a  0000040e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000037a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080010a  0080010a  00000418  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000448  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000084b  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000701  00000000  00000000  00000d13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000383  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00001798  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000430  00000000  00000000  0000186c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000191  00000000  00000000  00001c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001e2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e7       	ldi	r30, 0x7A	; 122
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5f 01 	call	0x2be	; 0x2be <main>
  9e:	0c 94 bb 01 	jmp	0x376	; 0x376 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <timer0_init>:

// Timer0 initialization function
void timer0_init(void) 
{
	// Timer/Counter Control Register B, 
	TCCR0B &= ~(1 << CS02); 
  a6:	85 b5       	in	r24, 0x25	; 37
  a8:	8b 7f       	andi	r24, 0xFB	; 251
  aa:	85 bd       	out	0x25, r24	; 37
	// Clock Select CS02 = 0, CS01 = 1 CS00 = 0 - 1/8 prescaler
	TCCR0B |= (1 << CS01);
  ac:	85 b5       	in	r24, 0x25	; 37
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	85 bd       	out	0x25, r24	; 37
	// Timer/Counter Interrupt Mask Register, TOIE0: Timer/Counter0 Overflow Interrupt Enable
	TIMSK0 |= (1 << TOIE0);
  b2:	ee e6       	ldi	r30, 0x6E	; 110
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	80 83       	st	Z, r24
	// Timer/Counter Register 
	TCNT0 = 0x00;
  bc:	16 bc       	out	0x26, r1	; 38
	// Global interrupt enable
	sei ();
  be:	78 94       	sei
  c0:	08 95       	ret

000000c2 <divide_number>:
}


void divide_number(uint16_t number)
{
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	ac 01       	movw	r20, r24
	temp1 = number/1000;
  c8:	ec 01       	movw	r28, r24
  ca:	d6 95       	lsr	r29
  cc:	c7 95       	ror	r28
  ce:	d6 95       	lsr	r29
  d0:	c7 95       	ror	r28
  d2:	d6 95       	lsr	r29
  d4:	c7 95       	ror	r28
  d6:	9e 01       	movw	r18, r28
  d8:	a5 ec       	ldi	r26, 0xC5	; 197
  da:	b0 e2       	ldi	r27, 0x20	; 32
  dc:	0e 94 ac 01 	call	0x358	; 0x358 <__umulhisi3>
  e0:	fc 01       	movw	r30, r24
  e2:	f2 95       	swap	r31
  e4:	e2 95       	swap	r30
  e6:	ef 70       	andi	r30, 0x0F	; 15
  e8:	ef 27       	eor	r30, r31
  ea:	ff 70       	andi	r31, 0x0F	; 15
  ec:	ef 27       	eor	r30, r31
  ee:	f0 93 12 01 	sts	0x0112, r31	; 0x800112 <temp1+0x1>
  f2:	e0 93 11 01 	sts	0x0111, r30	; 0x800111 <temp1>
	temp2 = number%1000/100;
  f6:	28 ee       	ldi	r18, 0xE8	; 232
  f8:	33 e0       	ldi	r19, 0x03	; 3
  fa:	e2 9f       	mul	r30, r18
  fc:	c0 01       	movw	r24, r0
  fe:	e3 9f       	mul	r30, r19
 100:	90 0d       	add	r25, r0
 102:	f2 9f       	mul	r31, r18
 104:	90 0d       	add	r25, r0
 106:	11 24       	eor	r1, r1
 108:	9a 01       	movw	r18, r20
 10a:	28 1b       	sub	r18, r24
 10c:	39 0b       	sbc	r19, r25
 10e:	36 95       	lsr	r19
 110:	27 95       	ror	r18
 112:	36 95       	lsr	r19
 114:	27 95       	ror	r18
 116:	ab e7       	ldi	r26, 0x7B	; 123
 118:	b4 e1       	ldi	r27, 0x14	; 20
 11a:	0e 94 ac 01 	call	0x358	; 0x358 <__umulhisi3>
 11e:	96 95       	lsr	r25
 120:	87 95       	ror	r24
 122:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <temp2+0x1>
 126:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <temp2>
	temp3 = number%100/10;
 12a:	9a 01       	movw	r18, r20
 12c:	36 95       	lsr	r19
 12e:	27 95       	ror	r18
 130:	36 95       	lsr	r19
 132:	27 95       	ror	r18
 134:	0e 94 ac 01 	call	0x358	; 0x358 <__umulhisi3>
 138:	9c 01       	movw	r18, r24
 13a:	36 95       	lsr	r19
 13c:	27 95       	ror	r18
 13e:	64 e6       	ldi	r22, 0x64	; 100
 140:	62 9f       	mul	r22, r18
 142:	c0 01       	movw	r24, r0
 144:	63 9f       	mul	r22, r19
 146:	90 0d       	add	r25, r0
 148:	11 24       	eor	r1, r1
 14a:	9a 01       	movw	r18, r20
 14c:	28 1b       	sub	r18, r24
 14e:	39 0b       	sbc	r19, r25
 150:	ad ec       	ldi	r26, 0xCD	; 205
 152:	bc ec       	ldi	r27, 0xCC	; 204
 154:	0e 94 ac 01 	call	0x358	; 0x358 <__umulhisi3>
 158:	96 95       	lsr	r25
 15a:	87 95       	ror	r24
 15c:	96 95       	lsr	r25
 15e:	87 95       	ror	r24
 160:	96 95       	lsr	r25
 162:	87 95       	ror	r24
 164:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <temp3+0x1>
 168:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <temp3>
	temp4 = number%10;
 16c:	9a 01       	movw	r18, r20
 16e:	0e 94 ac 01 	call	0x358	; 0x358 <__umulhisi3>
 172:	96 95       	lsr	r25
 174:	87 95       	ror	r24
 176:	96 95       	lsr	r25
 178:	87 95       	ror	r24
 17a:	96 95       	lsr	r25
 17c:	87 95       	ror	r24
 17e:	9c 01       	movw	r18, r24
 180:	22 0f       	add	r18, r18
 182:	33 1f       	adc	r19, r19
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	82 0f       	add	r24, r18
 192:	93 1f       	adc	r25, r19
 194:	9a 01       	movw	r18, r20
 196:	28 1b       	sub	r18, r24
 198:	39 0b       	sbc	r19, r25
 19a:	30 93 0c 01 	sts	0x010C, r19	; 0x80010c <temp4+0x1>
 19e:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <temp4>
}
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <__vector_16>:

// Interrupt function for timer0
ISR (TIMER0_OVF_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	8f 93       	push	r24
 1b4:	ef 93       	push	r30
 1b6:	ff 93       	push	r31
	if(transistor_out == 1){TRANSISTOR_CONTROL = 0x10; SEVEN_SEGMENT_CONTROL = seven_segment_buffer[temp1];}
 1b8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	51 f4       	brne	.+20     	; 0x1d4 <__vector_16+0x2c>
 1c0:	80 e1       	ldi	r24, 0x10	; 16
 1c2:	85 b9       	out	0x05, r24	; 5
 1c4:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <temp1>
 1c8:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <temp1+0x1>
 1cc:	e0 50       	subi	r30, 0x00	; 0
 1ce:	ff 4f       	sbci	r31, 0xFF	; 255
 1d0:	80 81       	ld	r24, Z
 1d2:	8b b9       	out	0x0b, r24	; 11
	if(transistor_out == 2){TRANSISTOR_CONTROL = 0x08; SEVEN_SEGMENT_CONTROL = seven_segment_buffer[temp2];}
 1d4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1d8:	82 30       	cpi	r24, 0x02	; 2
 1da:	51 f4       	brne	.+20     	; 0x1f0 <__vector_16+0x48>
 1dc:	88 e0       	ldi	r24, 0x08	; 8
 1de:	85 b9       	out	0x05, r24	; 5
 1e0:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <temp2>
 1e4:	f0 91 10 01 	lds	r31, 0x0110	; 0x800110 <temp2+0x1>
 1e8:	e0 50       	subi	r30, 0x00	; 0
 1ea:	ff 4f       	sbci	r31, 0xFF	; 255
 1ec:	80 81       	ld	r24, Z
 1ee:	8b b9       	out	0x0b, r24	; 11
	if(transistor_out == 3){TRANSISTOR_CONTROL = 0x04; SEVEN_SEGMENT_CONTROL = seven_segment_buffer[temp3];}
 1f0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1f4:	83 30       	cpi	r24, 0x03	; 3
 1f6:	51 f4       	brne	.+20     	; 0x20c <__vector_16+0x64>
 1f8:	84 e0       	ldi	r24, 0x04	; 4
 1fa:	85 b9       	out	0x05, r24	; 5
 1fc:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <temp3>
 200:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <temp3+0x1>
 204:	e0 50       	subi	r30, 0x00	; 0
 206:	ff 4f       	sbci	r31, 0xFF	; 255
 208:	80 81       	ld	r24, Z
 20a:	8b b9       	out	0x0b, r24	; 11
	if(transistor_out == 4){TRANSISTOR_CONTROL = 0x02; SEVEN_SEGMENT_CONTROL = seven_segment_buffer[temp4];}
 20c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 210:	84 30       	cpi	r24, 0x04	; 4
 212:	51 f4       	brne	.+20     	; 0x228 <__vector_16+0x80>
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	85 b9       	out	0x05, r24	; 5
 218:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <temp4>
 21c:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <temp4+0x1>
 220:	e0 50       	subi	r30, 0x00	; 0
 222:	ff 4f       	sbci	r31, 0xFF	; 255
 224:	80 81       	ld	r24, Z
 226:	8b b9       	out	0x0b, r24	; 11
	transistor_out++;
 228:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 22c:	8f 5f       	subi	r24, 0xFF	; 255
 22e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	if(transistor_out > 4) transistor_out = 1;
 232:	85 30       	cpi	r24, 0x05	; 5
 234:	18 f0       	brcs	.+6      	; 0x23c <__vector_16+0x94>
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
 23c:	ff 91       	pop	r31
 23e:	ef 91       	pop	r30
 240:	8f 91       	pop	r24
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <__vector_21>:


ISR(ADC_vect)
{
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	2f 93       	push	r18
 258:	3f 93       	push	r19
 25a:	4f 93       	push	r20
 25c:	5f 93       	push	r21
 25e:	6f 93       	push	r22
 260:	7f 93       	push	r23
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	af 93       	push	r26
 268:	bf 93       	push	r27
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
	// Read ADC value
	uint32_t adcValue = ADC;
 26e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 272:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
	// Scale ADC value to desired range (0 - 255)
	currentTemp = adcValue * 500 / 1023;
 276:	a4 ef       	ldi	r26, 0xF4	; 244
 278:	b1 e0       	ldi	r27, 0x01	; 1
 27a:	0e 94 ac 01 	call	0x358	; 0x358 <__umulhisi3>
 27e:	2f ef       	ldi	r18, 0xFF	; 255
 280:	33 e0       	ldi	r19, 0x03	; 3
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	50 e0       	ldi	r21, 0x00	; 0
 286:	0e 94 8a 01 	call	0x314	; 0x314 <__udivmodsi4>
 28a:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <currentTemp+0x1>
 28e:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <currentTemp>
	
	// Start the next ADC conversion
	ADCSRA |= (1 << ADSC);
 292:	ea e7       	ldi	r30, 0x7A	; 122
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	80 64       	ori	r24, 0x40	; 64
 29a:	80 83       	st	Z, r24
}
 29c:	ff 91       	pop	r31
 29e:	ef 91       	pop	r30
 2a0:	bf 91       	pop	r27
 2a2:	af 91       	pop	r26
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	7f 91       	pop	r23
 2aa:	6f 91       	pop	r22
 2ac:	5f 91       	pop	r21
 2ae:	4f 91       	pop	r20
 2b0:	3f 91       	pop	r19
 2b2:	2f 91       	pop	r18
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <main>:

int main(void)
{
	DDRB = 0x1F;
 2be:	8f e1       	ldi	r24, 0x1F	; 31
 2c0:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	8a b9       	out	0x0a, r24	; 10
	TRANSISTOR_CONTROL |= (1 << 1) | (1 << 2) | (1 << 3) | (1 << 4);
 2c6:	85 b1       	in	r24, 0x05	; 5
 2c8:	8e 61       	ori	r24, 0x1E	; 30
 2ca:	85 b9       	out	0x05, r24	; 5
	DDRC = 0x00;
 2cc:	17 b8       	out	0x07, r1	; 7
	
	timer0_init();
 2ce:	0e 94 53 00 	call	0xa6	; 0xa6 <timer0_init>
	
	// Enable ADC and set ADC prescaler to 128
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 2d2:	ea e7       	ldi	r30, 0x7A	; 122
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	87 68       	ori	r24, 0x87	; 135
 2da:	80 83       	st	Z, r24
	
	// Set ADC reference voltage to AVCC
	ADMUX |= (1 << REFS0);
 2dc:	ac e7       	ldi	r26, 0x7C	; 124
 2de:	b0 e0       	ldi	r27, 0x00	; 0
 2e0:	8c 91       	ld	r24, X
 2e2:	80 64       	ori	r24, 0x40	; 64
 2e4:	8c 93       	st	X, r24
	
	// Enable ADC interrupt
	ADCSRA |= (1 << ADIE);
 2e6:	80 81       	ld	r24, Z
 2e8:	88 60       	ori	r24, 0x08	; 8
 2ea:	80 83       	st	Z, r24
	
	// Start the first ADC conversion
	ADCSRA |= (1 << ADSC);
 2ec:	80 81       	ld	r24, Z
 2ee:	80 64       	ori	r24, 0x40	; 64
 2f0:	80 83       	st	Z, r24
	
	sei ();
 2f2:	78 94       	sei
	
	

	while (1)
	{
		divide_number(currentTemp);
 2f4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <currentTemp>
 2f8:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <currentTemp+0x1>
 2fc:	0e 94 61 00 	call	0xc2	; 0xc2 <divide_number>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 300:	2f e7       	ldi	r18, 0x7F	; 127
 302:	88 e3       	ldi	r24, 0x38	; 56
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	21 50       	subi	r18, 0x01	; 1
 308:	80 40       	sbci	r24, 0x00	; 0
 30a:	90 40       	sbci	r25, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <main+0x48>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0x52>
 310:	00 00       	nop
 312:	f0 cf       	rjmp	.-32     	; 0x2f4 <main+0x36>

00000314 <__udivmodsi4>:
 314:	a1 e2       	ldi	r26, 0x21	; 33
 316:	1a 2e       	mov	r1, r26
 318:	aa 1b       	sub	r26, r26
 31a:	bb 1b       	sub	r27, r27
 31c:	fd 01       	movw	r30, r26
 31e:	0d c0       	rjmp	.+26     	; 0x33a <__udivmodsi4_ep>

00000320 <__udivmodsi4_loop>:
 320:	aa 1f       	adc	r26, r26
 322:	bb 1f       	adc	r27, r27
 324:	ee 1f       	adc	r30, r30
 326:	ff 1f       	adc	r31, r31
 328:	a2 17       	cp	r26, r18
 32a:	b3 07       	cpc	r27, r19
 32c:	e4 07       	cpc	r30, r20
 32e:	f5 07       	cpc	r31, r21
 330:	20 f0       	brcs	.+8      	; 0x33a <__udivmodsi4_ep>
 332:	a2 1b       	sub	r26, r18
 334:	b3 0b       	sbc	r27, r19
 336:	e4 0b       	sbc	r30, r20
 338:	f5 0b       	sbc	r31, r21

0000033a <__udivmodsi4_ep>:
 33a:	66 1f       	adc	r22, r22
 33c:	77 1f       	adc	r23, r23
 33e:	88 1f       	adc	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	1a 94       	dec	r1
 344:	69 f7       	brne	.-38     	; 0x320 <__udivmodsi4_loop>
 346:	60 95       	com	r22
 348:	70 95       	com	r23
 34a:	80 95       	com	r24
 34c:	90 95       	com	r25
 34e:	9b 01       	movw	r18, r22
 350:	ac 01       	movw	r20, r24
 352:	bd 01       	movw	r22, r26
 354:	cf 01       	movw	r24, r30
 356:	08 95       	ret

00000358 <__umulhisi3>:
 358:	a2 9f       	mul	r26, r18
 35a:	b0 01       	movw	r22, r0
 35c:	b3 9f       	mul	r27, r19
 35e:	c0 01       	movw	r24, r0
 360:	a3 9f       	mul	r26, r19
 362:	70 0d       	add	r23, r0
 364:	81 1d       	adc	r24, r1
 366:	11 24       	eor	r1, r1
 368:	91 1d       	adc	r25, r1
 36a:	b2 9f       	mul	r27, r18
 36c:	70 0d       	add	r23, r0
 36e:	81 1d       	adc	r24, r1
 370:	11 24       	eor	r1, r1
 372:	91 1d       	adc	r25, r1
 374:	08 95       	ret

00000376 <_exit>:
 376:	f8 94       	cli

00000378 <__stop_program>:
 378:	ff cf       	rjmp	.-2      	; 0x378 <__stop_program>
